name: "GREEN: Docker Pol 0: 0000, 1100"

on:
  workflow_dispatch:
  push:
    branches:
      - "test"
    tags:
      - "all"
      - "pol0"
      - "pol0-g"

env:
  # System Input Signal: 00
  CI_TESTS_00_PASS: false
  CI_TESTS_00_RUN: false
  # System Input Signal: 11
  CI_TESTS_11_PASS: true
  CI_TESTS_11_RUN: true

  # Policy State
  POLICY: 0

jobs:

    ### TEST CASE: 0000 ###
    setup_case_0000:
      runs-on: ubuntu-latest
      steps:
        - name: Setup Test Scenario
          id: setup
          run: |
            if [ "${POLICY}" -ne 0 ]; then
              echo "[ERROR] Test Scenario Incorrect: Policy State is NOT satisfied"
              echo "[DEBUG] Test assumes Policy 0, but Policy is ${POLICY}!"
              echo " --> Prematurely, exiting Test Case with 1!"
              exit 1
            fi
            echo "SHOULD_RUN_CI_TESTS=${CI_TESTS_00_RUN}" >> $GITHUB_OUTPUT
            echo "SHOULD_PASS_CI_TESTS=${CI_TESTS_00_PASS}" >> $GITHUB_OUTPUT
            echo "CASE_POLICY=${POLICY}" >> $GITHUB_OUTPUT
      outputs:
        SHOULD_RUN_CI_TESTS: ${{ steps.setup.outputs.SHOULD_RUN_CI_TESTS }}
        SHOULD_PASS_CI_TESTS: ${{ steps.setup.outputs.SHOULD_PASS_CI_TESTS }}
        CASE_POLICY: ${{ steps.setup.outputs.CASE_POLICY }}

    mock_skipped_ci_test_job:
      runs-on: ubuntu-latest
      needs: setup_case_0000
      if: ${{ needs.setup_case_0000.outputs.SHOULD_RUN_CI_TESTS != 'false' }}
      steps:
        - name: If I run then the test is wrong
          run: exit 1

    call_docker_job_after_ci_skip:
      needs: [setup_case_0000, mock_skipped_ci_test_job]
      # if: always() && ${{ needs.setup_case_0000.outputs.CASE_POLICY }} != 0 && (
      #     ${{ needs.setup_case_0000.outputs.CASE_POLICY }} == 1 || (
      #     needs.*.result == 'success' && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') || (
      #     ${{ needs.setup_case_0000.outputs.CASE_POLICY }} == 3 && !contains(needs.*.result, 'failure') && (needs.*.result == 'skipped' || contains(needs.*.result, 'cancelled'))
      #   )))
      if: always()
      uses: boromir674/automated-workflows/.github/workflows/docker.yml@test
      name: Trigger Docker Workflow
      with:
        DOCKER_USER: ${{ vars.DOCKER_USER }}
        acceptance_policy: ${{ needs.setup_case_0000.outputs.CASE_POLICY }}
        tests_pass: ${{ needs.mock_skipped_ci_test_job.result == 'success' }}
        tests_run: ${{ !contains(fromJSON('["skipped", "cancelled"]'), needs.mock_skipped_ci_test_job.result) }}
        image_slug: "cicd-test"
        image_tag: "0000"
      secrets:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    verify_docker_image_not_pushed:
      runs-on: ubuntu-latest
      needs: call_docker_job_after_ci_skip
      if: always()
      steps:
        - name: "Sanity Check on Test Scenario Input Signal is 00 (CI Tests NOT Triggered)"
          run: |
            if [ "${CI_TESTS_00_RUN}" != "false" ]; then
              echo "[ERROR] Test Scenario Incorrect: CI Test Job MUST be Skipped"
              echo "[DEBUG] Expect Signal 00, as semantically correct Signal!"
              echo "Prematurely, exiting Test Case with 1!"
              exit 1
            fi

        - name: Assert Image NOT Pushed to DockerHub
          run: |
            command_exit_status=0
            docker manifest inspect "$IMAGE_REF" || command_exit_status=1
            if [ $command_exit_status -ne 0 ]; then
              echo " --> PASS: Assert NO PUSH Docker Image "${IMAGE_REF}" to DockerHub"
              test_case_status=0
            else
              echo " --> FAIL: Assert NO PUSH Docker Image "${IMAGE_REF}" to DockerHub"
              test_case_status=1
            fi
            exit $test_case_status

        - name: Assert (Functional) NOT Triggered Dockered, by inspecting ${{ needs.call_docker_job_after_ci_skip.result }}
          run: |
            if [ "false" != ${{ !contains(needs.call_docker_job_after_ci_skip.result, 'skipped') }} ]; then
              echo " --> FAIL: Assert NO Trigger Docker Job"
              exit 1
            fi


    ### TEST CASE: 1100 ###
    setup_case_1100:
      runs-on: ubuntu-latest
      steps:
        - name: Setup Test Scenario
          id: setup
          run: |
            if [ "${POLICY}" -ne 0 ]; then
              echo "[ERROR] Test Scenario Incorrect: Policy State is NOT satisfied"
              echo "[DEBUG] Test assumes Policy 0, but Policy is ${POLICY}!"
              echo " --> Prematurely, exiting Test Case with 1!"
              exit 1
            fi
            echo "SHOULD_RUN_CI_TESTS=${CI_TESTS_11_RUN}" >> $GITHUB_OUTPUT
            echo "SHOULD_PASS_CI_TESTS=${CI_TESTS_11_PASS}" >> $GITHUB_OUTPUT
            echo "CASE_POLICY=${POLICY}" >> $GITHUB_OUTPUT
      outputs:
        SHOULD_RUN_CI_TESTS: ${{ steps.setup.outputs.SHOULD_RUN_CI_TESTS }}
        SHOULD_PASS_CI_TESTS: ${{ steps.setup.outputs.SHOULD_PASS_CI_TESTS }}
        CASE_POLICY: ${{ steps.setup.outputs.CASE_POLICY }}

    mock_succeeded_ci_test_job:
      runs-on: ubuntu-latest
      needs: setup_case_1100
      if: always() && ${{ needs.setup_case_1100.outputs.SHOULD_RUN_CI_TESTS == 'true' }}
      steps:
        - name: "Exit Job with emulated 'success' result"
          run: |
            if [[ "true" != ${CI_TESTS_11_PASS} || "true" != ${CI_TESTS_11_RUN} ]]; then
              echo "[FATAL] Test Scenario Incorrect: Prerequisites NOT satisfied"
              echo "[FIX] Set the CI_TESTS_11_PASS env var in workflow level to 'true' in env context at workflow level"
              echo "[FIX] Set the CI_TESTS_11_RUN env var in workflow level to 'true' in env context at workflow level"
              echo "Prematurely, exiting Test Case with 1!"
              exit 1
            fi

    call_docker_job_after_ci_pass:
      needs: [setup_case_1100, mock_succeeded_ci_test_job]
      name: Trigger Docker Workflow
      if: always() && ${{ needs.setup_case_1100.outputs.CASE_POLICY }} != 0 && (
          ${{ needs.setup_case_1100.outputs.CASE_POLICY }} == 1 || (
          needs.*.result == 'success' && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') || (
          ${{ needs.setup_case_1100.outputs.CASE_POLICY }} == 3 && !contains(needs.*.result, 'failure') && (needs.*.result == 'skipped' || contains(needs.*.result, 'cancelled'))
        )))
      uses: boromir674/automated-workflows/.github/workflows/docker.yml@test
      with:
        DOCKER_USER: ${{ vars.DOCKER_USER }}
        acceptance_policy: ${{ needs.setup_case_1100.outputs.CASE_POLICY == 0 && 0 }}
        tests_pass: ${{ needs.mock_succeeded_ci_test_job.result == 'success' }}
        tests_run: ${{ !contains(fromJSON('["skipped", "cancelled"]'), needs.mock_succeeded_ci_test_job.result) }}
        image_slug: "cicd-test"
        image_tag: "1100"
      secrets:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      # secrets: inherit

    verify_docker_image_not_pushed3:
      runs-on: ubuntu-latest
      needs: call_docker_job_after_ci_pass
      if: always()
      steps:
        - name: "Sanity Check on Test Scenario Input Signal is 11 (CI Tests PASSED)"
          run: |
            if [[ "${CI_TESTS_11_PASS}" != "true" || "${CI_TESTS_11_RUN}" != "true" ]]; then
              echo "[ERROR] Test Scenario Incorrect: CI Test Job must PASS"
              echo "[DEBUG] Expect Signal 11, as semantically correct Signal!"
              echo "Prematurely, exiting Test Case with 1!"
              exit 1
            fi

        - name: Assert Image NOT Pushed to DockerHub
          run: |
            command_exit_status=0
            docker manifest inspect "$IMAGE_REF" || command_exit_status=1
            if [ $command_exit_status -ne 0 ]; then
              echo " --> PASS: Assert NO PUSH Docker Image "${IMAGE_REF}" to DockerHub"
              test_case_status=0
            else
              echo " --> FAIL: Assert NO PUSH Docker Image "${IMAGE_REF}" to DockerHub"
              test_case_status=1
            fi
            exit $test_case_status

            #  || "false" != ${{ !contains(needs.call_docker_job_after_ci_pass.result, 'skipped') }} ]; then
        - name: "Assert (Functional) NOT Triggered Dockered, by inspecting ${{ needs.call_docker_job_after_ci_pass.result }}"
          run: |
            if [[ ! -z "${IMAGE_REF}" ]]; then
              echo " --> FAIL: Assert NO Trigger Docker Job"
              exit 1
            fi
