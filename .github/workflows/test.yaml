name: Test Docker Policy (3) 'CI Cont Delivery'

on:
  push:
    branches:
      - "*"
    tags:
      - "*"


env:
  docker_target: ""


jobs:

  # TEST Case 1 - CI Passes

    mock_succeeded_ci_test_job:
      runs-on: ubuntu-latest
      env:
        myStringInBraces: ${{ 'It''s open source!' }}
        myNull: ${{ null }}
      steps:
        - run: echo "Mock CI Test Job"
        - run: echo $myStringInBraces
        - name: a
          run: |
            echo $myStringInBraces
            this_target="${docker_target:-found_empty}"
            echo "this_target: ${this_target}"
            echo "my null as empty string/var: $myNull"
            # echo "my context var empty string (null) as string: <v>${{ vars.EMPTY_STRING }}</v>"

    call_docker_job_after_ci_pass:
      name: Trigger Docker Workflow
      needs: mock_succeeded_ci_test_job
      uses: boromir674/automated-workflows/.github/workflows/docker.yml@test
      with:
        DOCKER_USER: ${{ vars.DOCKER_USER }}
        acceptance_policy: 3
        image_slug: "cicd-test"
        image_tag: "1111"
      secrets:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      # secrets: inherit

    verify_docker_image_pushed:
    # ASSERT ALL: needed Job called and passed & this Job exits with 0
      runs-on: ubuntu-latest
      needs: call_docker_job_after_ci_pass
      if: always()
      env:
        allo_ref: ${{ needs.call_docker_job_after_ci_pass.outputs.image_ref }}
      steps:
        - name: "Assert CI Tests passed (or test code is wrong)"
          run: |
            if [ ${{ needs.mock_succeeded_ci_test_job.result }} -ne 0 ]; then
              echo "[ERROR] Test Scenario Incorrect: Prerequisites NOT satisfied"
              echo "[DEBUG] Test assumes succeeded CI Test Job, but our Mock CI Tests failed!"
              echo "Exiting with 1"
              exit 1
            fi

        - run: echo ${{ needs.call_docker_job_after_ci_pass.outputs.image_ref }}
        - run: echo ${{ needs.call_docker_job_after_ci_pass.outputs.IMAGE_REF }}

        - run: echo "IMAGE_REF=${{ needs.call_docker_job_after_ci_pass.outputs.image_ref }}" >> $GITHUB_ENV

        - name: Retrieve Layers of ${{ needs.call_docker_job_after_ci_pass.outputs.image_ref }}
          run: |
            docker manifest inspect "$IMAGE_REF" > docker_layers.json
            command_exit_status=$?
            if [ $command_exit_status -eq 0 ]; then
              echo "PASS: Verify Docker Image "${IMAGE_REF}" was Pushed to DockerHub"
            else
              echo "FAIL: Verify Docker Image "${IMAGE_REF}" was Pushed to DockerHub"
              exit 1
            fi

  # TEST Case 2 - CI Fails

    mock_failed_ci_test_job:
      runs-on: ubuntu-latest
      steps:
        - run: echo "Mock CI Test Job"
        - run: echo "CI_TESTS_TRIGGERED=true" >> $GITHUB_OUTPUT
        - run: exit 1
      outputs:
        CI_TESTS_TRIGGERED: ${{ steps.mock_failed_ci_test_job.outputs.CI_TESTS_TRIGGERED }}
        CI_TESTS_FAILED: "1"

    call_docker_job_after_ci_fail:
      needs: mock_failed_ci_test_job
      uses: boromir674/automated-workflows/.github/workflows/docker.yml@test
      with:
        DOCKER_USER: ${{ vars.DOCKER_USER }}
        acceptance_policy: 3
        image_slug: "cicd-test"
        image_tag: "0111"
      secrets:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    verify_docker_image_not_pushed:
    # ASSERT ALL: needed Job was skipped
      runs-on: ubuntu-latest
      needs: call_docker_job_after_ci_fail
      if: always()
      steps:
#  needs.*.result == 'success' && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') || (
    #     inputs.acceptance_policy == 3 && !contains(needs.*.result, 'failure') && (needs.*.result == 'skipped' || contains(needs.*.result, 'cancelled'))
        - name: "Check Test Scenario Prerequisites Satisfied: Assert CI Tests Triggered, but Failed"
          run: |
            if [ "false" != ${{ ( contains(needs.mock_failed_ci_test_job.result, 'cancelled') || contains(needs.mock_failed_ci_test_job.result, 'skipped') ) }} ]; then
              echo "[ERROR] Test Scenario Incorrect: Prerequisites NOT satisfied"
              echo "[DEBUG] Test assumes CI Test Job Triggered, and Failed."
              echo "[DEBUG] But our Mock CI Tests were skipped or cancelled!"
              echo "Prematurely, exiting Test Case with 1!"
              exit 1
            fi
            if [ ${{ needs.mock_failed_ci_test_job.outputs.result }} -eq 0 ]; then
              echo "[ERROR] Test Scenario Incorrect: Prerequisites NOT satisfied"
              echo "[DEBUG] Test assumes CI Test Job Triggered, and Failed."
              echo "[DEBUG] But our Mock CI Tests passed!"
              echo "Prematurely, exiting Test Case with 1!"
              exit 1
            fi

        - name: Assert Image NOT Pushed to DockerHub
          run: |
            command_exit_status=0
            docker manifest inspect "$IMAGE_REF" || command_exit_status=1
            if [ $command_exit_status -ne 0 ]; then
              echo " --> PASS: Assert NO PUSH Docker Image "${IMAGE_REF}" to DockerHub"
              test_case_status=0
            else
              echo " --> FAIL: Assert NO PUSH Docker Image "${IMAGE_REF}" to DockerHub"
              test_case_status=1
            fi
            exit $test_case_status

        - name: Assert (Functional) NOT Triggered Dockered
          run: |
            if [ "false" != ${{ !contains(needs.call_docker_job_after_ci_fail.result, 'skipped') }} ]; then
              echo " --> FAIL: Assert NO Trigger Docker Job"
              exit 1
            fi

  # TEST Case 2 - CI Skipped

    # call_docker_job_after_ci_skip:
    #   uses: boromir674/automated-workflows/.github/workflows/workflow.yml@main
    #   name: Trigger Docker Workflow
    #   with:
    #     DOCKER_USER: ${{ secrets.DOCKER_USER }}
    #     image_slug: "cicd-test"
    #     image_tag: "latest"
    #   secrets:
    #     DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}