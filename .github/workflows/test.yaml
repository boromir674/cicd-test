name: Test CI/CD Pipeline

on:
  push:
    branches:
      - "*"
    tags:
      - "*"


env:
  docker_target: "my_target"


jobs:

  # TEST Case 1 - CI Passes

    mock_succeeded_ci_test_job:
      runs-on: ubuntu-latest
      env:
        myStringInBraces: ${{ 'It''s open source!' }}
        STRAIGHT_TARGET: ${{ vars.docker_target }}
        MY_ENV_VAR: ${{ vars.docker_target == '' && 'found_empty' || vars.docker_target }}
      steps:
        - run: echo "Mock CI Test Job"
        - run: echo $myStringInBraces
        - name: a
          run: |
            echo $myStringInBraces
            echo "MY_ENV_VAR: ${MY_ENV_VAR}"
            echo "STRAIGHT_TARGET: ${STRAIGHT_TARGET}"

            this_target="${docker_target}"
            echo "this_target: ${this_target}"
            
            this_var=${{ vars.docker_target == '' && 'found_empty' || vars.docker_target }}
            echo "this_var: ${this_var}"


    # call_docker_job_after_ci_pass:
    #   name: Trigger Docker Workflow
    #   needs: mock_succeeded_ci_test_job
    #   uses: boromir674/automated-workflows/.github/workflows/docker.yml@test
    #   with:
    #     DOCKER_USER: ${{ vars.DOCKER_USER }}
    #     acceptance_policy: 3
    #     image_slug: "cicd-test"
    #     image_tag: "latest"
    #   secrets:
    #     DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    #   # secrets: inherit

    # verify_docker_image_pushed:
    # # ASSERT ALL: needed Job called and passed & this Job exits with 0
    #   runs-on: ubuntu-latest
    #   needs: call_docker_job_after_ci_pass
    #   if: always()
    #   steps:
    #     - name: "Assert CI Tests passed (or test code is wrong)"
    #       run: |
    #         if [ ${{ needs.mock_succeeded_ci_test_job.result }} -ne 0 ]; then
    #           echo "[ERROR] Test Scenario Incorrect Prerequisites NOT satisfied"
    #           echo "[DEBUG] Test assumes succeeded CI Test Job, but our Mock CI Tests failed!"
    #           echo "Exiting with 1"
    #           exit 1
    #         fi
    #     - run: echo ${{ needs.call_docker_jon.outputs.IMAGE_REF }}
    #     - run: echo "IMAGE_REF=${{ needs.call_docker_jon.outputs.IMAGE_REF }}" >> $GITHUB_ENV
    #     - name: Retrieve Layers of ${{ needs.call_docker_jon.outputs.IMAGE_REF }}
    #       run: |
    #         docker manifest inspect "$IMAGE_REF" > docker_layers.json
    #         command_exit_status=$?
    #         if [ $command_exit_status -eq 0 ]; then
    #           echo "PASS: Verify Docker Image "${IMAGE_REF}" was Pushed to DockerHub"
    #         else
    #           echo "FAIL: Verify Docker Image "${IMAGE_REF}" was Pushed to DockerHub"
    #           exit 1
    #         fi

  # # TEST Case 2 - CI Fails

  #   call_docker_job_after_ci_fail:
  #     uses: boromir674/automated-workflows/.github/workflows/workflow.yml@main
  #     name: Trigger Docker Workflow
  #     with:
  #       DOCKER_USER: ${{ secrets.DOCKER_USER }}
  #       image_slug: "cicd-test"
  #       image_tag: "latest"
  #     secrets:
  #       DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}



  # # TEST Case 2 - CI Skipped

  #   call_docker_job_after_ci_skip:
  #     uses: boromir674/automated-workflows/.github/workflows/workflow.yml@main
  #     name: Trigger Docker Workflow
  #     with:
  #       DOCKER_USER: ${{ secrets.DOCKER_USER }}
  #       image_slug: "cicd-test"
  #       image_tag: "latest"
  #     secrets:
  #       DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}