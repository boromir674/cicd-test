name: "RED: Docker Pol 3: 0111"

on:
  push:
    branches:
      - "*"
    tags:
      - "*"


jobs:

  # TEST Case 2 - CI Fails

    mock_failed_ci_test_job:
      runs-on: ubuntu-latest
      steps:
        - run: echo "Mock CI Test Job"
        - run: echo "CI_TESTS_TRIGGERED=true" >> $GITHUB_OUTPUT
        - run: exit 1
      outputs:
        CI_TESTS_TRIGGERED: ${{ steps.mock_failed_ci_test_job.outputs.CI_TESTS_TRIGGERED }}
        CI_TESTS_FAILED: "1"

    call_docker_job_after_ci_fail:
      needs: mock_failed_ci_test_job
      uses: boromir674/automated-workflows/.github/workflows/docker.yml@test
      with:
        DOCKER_USER: ${{ vars.DOCKER_USER }}
        acceptance_policy: 3
        image_slug: "cicd-test"
        image_tag: "0111"
      secrets:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    verify_docker_image_not_pushed:
      runs-on: ubuntu-latest
      needs: call_docker_job_after_ci_fail
      if: always()
      steps:
        - name: "Check Test Scenario Prerequisites Satisfied: Assert CI Tests Triggered, but Failed"
          run: |
            if [ "false" != ${{ ( contains(needs.mock_failed_ci_test_job.result, 'cancelled') || contains(needs.mock_failed_ci_test_job.result, 'skipped') || contains(needs.*.result, 'cancelled') ) }} ]; then
              echo "[ERROR] Test Scenario Incorrect: Prerequisites NOT satisfied"
              echo "[DEBUG] Test assumes CI Test Job Triggered, and Failed."
              echo "[DEBUG] But our Mock CI Tests were skipped or cancelled!"
              echo "Prematurely, exiting Test Case with 1!"
              exit 1
            fi
            if [ ${{ needs.mock_failed_ci_test_job.outputs.result }} -eq 0 ]; then
              echo "[ERROR] Test Scenario Incorrect: Prerequisites NOT satisfied"
              echo "[DEBUG] Test assumes CI Test Job Triggered, and Failed."
              echo "[DEBUG] But our Mock CI Tests passed!"
              echo "Prematurely, exiting Test Case with 1!"
              exit 1
            fi

        - name: Assert Image NOT Pushed to DockerHub
          run: |
            command_exit_status=0
            docker manifest inspect "$IMAGE_REF" || command_exit_status=1
            if [ $command_exit_status -ne 0 ]; then
              echo " --> PASS: Assert NO PUSH Docker Image "${IMAGE_REF}" to DockerHub"
              test_case_status=0
            else
              echo " --> FAIL: Assert NO PUSH Docker Image "${IMAGE_REF}" to DockerHub"
              test_case_status=1
            fi
            exit $test_case_status

        - name: Assert (Functional) NOT Triggered Dockered
          run: |
            if [ "false" != ${{ !contains(needs.call_docker_job_after_ci_fail.result, 'skipped') }} ]; then
              echo " --> FAIL: Assert NO Trigger Docker Job"
              exit 1
            fi
