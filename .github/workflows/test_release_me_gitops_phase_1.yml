name: "Verify open PR to main when board-n-release Git Ops event"

on:
  workflow_dispatch:
  push:
    branches:
      - "test"
    tags:
      - "all"
      - "go-board-n-release"
      - "go-board-n-release-g"


# TEST CASE
# GIVEN a Repo with 'main' and 'release' branches
# GIVEN a "User" Branch (ie, feat, fix, both, etc) with changes to be released
#  - GIVEN it will not cause any merge conficts
#   - For now we require that "User Br" is a direct descendant of 'main', to guarantee no conflicts
# Assuming any Github Protection 'release' Rules will be Green

# WHEN a 'board-n-release' event is fired from client repo

# THEN assert PR has opened and closed from User Br to 'release' br

# [OPT] assert the expected labels has been put to PR -> 'release'

# THEN Assert PR opened against 'main' branch

# AND GIVEN we emulate some plausible git steps, like Changelog.md update and Sem Ver bump 

# WHEN we trigger the 2nd `release-me` Phase of the Git Ops Process

# THEN Assert that the PR to main closed with code merge

jobs:
  setup:
    runs-on: ubuntu-latest
    env:
      # Release branch, we assume client repo adopts/uses
      RELEASE_BR: release
      # GIVEN / Internal Environment Variables for DRY
      _USER_BR: "user-branch-${{ github.run_id }}"
      _GO_OWNER: 'boromir674'
      _GO_REPO_NAME: 'gitops-automation'
      _GO_REPO: 'boromir674/gitops-automation'
      _GO_DIR: "go-repo"
      # TEST CASE 1 - DATA
      # CONSTANT Env Var for `auto-prod` tag, of `release-me` process phase 2 
      TAG_PHASE_2: "auto-prod-1.0.0"
      EXPECTED_RC_TAG: "v1.0.0-rc"
      # TEST CASE 2 - DATA
      # TAG_PHASE_2: "auto-prod-1.3.0-dev"
      # EXPECTED_RC_TAG: "v1.3.0-dev"
    steps:

      # GIVEN a Client Repo with 'main' and 'release' branches
      - name: Checkout '${{ env._GO_REPO }}' Git Ops Compatible Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env._GO_REPO }}
          ref: "main"
          path: ${{ env._GO_DIR }}
          token: ${{ secrets.PUSH_TO_GITOPS_AUTOMATION }}
          # use token with PAT value with push permission to avoid using 3rd-party action below

      # Put release onto main to avoid potential conflicts
      # - name: Put Release Branch on 'main' to avoid potential conflicts
      #   working-directory: ${{ env._GO_DIR }}
      #   env:
      #     release: ${{ env.RELEASE_BR }}
      #   run: |
      #     git fetch
      #     git branch --track $release "origin/${release}" || echo "Found local Branch '${release}'"
      #     git branch -a
      #     git log --oneline --decorate --graph --all

      # - working-directory: ${{ env._GO_DIR }}
      #   run: |
      #     git checkout "${{ env.RELEASE_BR }}"
      #     git pull origin "${{ env.RELEASE_BR }}"

      #     git log --oneline --decorate --graph --all
      #     git merge main --no-edit
      #     git log --oneline --decorate --graph --all

      #     git push
      #     git log --oneline --decorate --graph --all

      # GIVEN a Client "User" Branch (ie, feat, fix, both, etc) with changes to be released
      # - run: git config --global user.name "Konstantinos Lampridis"
      # - run: git config --global user.email "boromir674@hotmail.com"

      - name: Make dummy changes on local User Branch '${_USER_BR}'
        working-directory: ${{ env._GO_DIR }}
        env:
          TOPICAL_BRANCH_CHANGES_FILE: "changes-from-topical-branch.txt"
        # env:
        #   GITHUB_TOKEN: ${{ secrets.CICD_TEST_GH_TOKEN }}
        run: |
          git config --local user.name "Konstantinos Lampridis"
          git config --local user.email "boromir674@hotmail.com"

          git checkout -b ${_USER_BR}
          echo "User Branch '${_USER_BR}'" > "${TOPICAL_BRANCH_CHANGES_FILE}"
          git add "${TOPICAL_BRANCH_CHANGES_FILE}"

          git commit -m "auto-commit: write (literally) the User's Branch name '${_USER_BR}' to a file"

      - name: Push User Branch on '${{ env._GO_REPO }}' repo
        working-directory: ${{ env._GO_DIR }}
        run: git push origin ${_USER_BR}



      # WHEN a 'board-n-release' event is fired from client repo
      - name: Fire 'board-n-release' git tag event, scoped on '${{ env._GO_REPO }}' repo
        env:
          TAG: "release-me"
        working-directory: ${{ env._GO_DIR }}
        run: |
          # if tag exists on remote delete it
          git push --delete origin ${TAG} || echo "No tag to delete"

          # if tag exists on local checkout, delete it
          git tag -d ${TAG} || echo "No tag to delete"

          git tag ${TAG}
          git push origin ${TAG}

      # Since the assertions require waiting for "things" to happen on remotes we employ pytest
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: 'Install Tooling: tox v3.28'
        run: pip install tox==3.28

      - uses: actions/checkout@v4
        name: 'Checkout our Test Suite'

      # create deterministic and reproducible environment for pytest
      - name: 'Use Pinned/Locked python dependencies that satisfy version constraints'
        run: tox -vv -e pin-deps
      - name: 'Build deterministic python virtual environment'
        run: tox -vv -e test --notest

      # THEN assert PR closed with Merge from User Br to 'release' br
      # AND PR to main Opened
      # Assert PR Closed with Merge from ${{ env._USER_BR }} to 'release' branch, on ${{ env._GO_REPO_NAME }} github repo
      # AND PR to main Opened
      - name: Assert 'release-me' git ops event 1st phase's state (PR to 'release' closed with merge, PR to 'main' opened) reached
        env:
          # pass in env vars required for test case
          GO_INCOMING_BRANCH: ${{ env._USER_BR }}
          GO_RELEASE_BRANCH: ${{ env.RELEASE_BR }}
          # if test code has auth issues pass in another token:
          # GITHUB_TOKEN: ${{ secrets.SOME_AUTHORIZED_GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.READ_PR_GITOPS_AUTOMATION }}
        run: tox -vvs -e test -- -n auto -vvs -k 'test_pr_to_release_opened_n_closed or test_pr_to_main_opened' --run-gitops

      #### TEST PHASE 2 ####

      # [OPT] assert the expected labels has been put to PR -> 'release'

      - run: ls -la
      - name: Checkout '${{ env._GO_REPO }}' Git Ops Compatible Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env._GO_REPO }}
          ref: "main"
          path: ${{ env._GO_DIR }}
          set-safe-directory: ''  # `git config --global --add safe.directory <path>`
          token: ${{ secrets.PUSH_TO_GITOPS_AUTOMATION }}

      # AND GIVEN we emulate some plausible git steps on Release branch
      # EG: Changelog.md update and Sem Ver bump
      - name: Sync '${{ env.RELEASE_BR }}' branch
        working-directory: ${{ env._GO_DIR }}
        env:
          release: ${{ env.RELEASE_BR }}
        run: |
          git fetch
          git branch --track $release "origin/${release}" || echo "Found local Branch '${release}'"
          git checkout "${release}"
          git pull origin "${release}"

      # Sem Ver Bump in sources is not relevant for the gitops-automation project

      # Emulate Changelog.md update
      - name: "Emulate updating CHANGELOG.md with new Release entry"
        working-directory: ${{ env._GO_DIR }}
        run: |
          echo "## [Unreleased]" > CHANGELOG.md
          echo "### Added" >> CHANGELOG.md
          echo "- ${_USER_BR}" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          cat CHANGELOG.md

          git add CHANGELOG.md
          git config user.name "Konstantinos Lampridis"
          git config user.email "boromir674@hotmail.com"
          git commit -m "auto-commit: update CHANGELOG.md with dummy Release entry"
          git push origin ${{ env.RELEASE_BR }}

      # WHEN we trigger the 2nd `release-me` Phase of the Git Ops Process
      - name: "Push Git Tag '${{ env.TAG_PHASE_2 }}'"
        working-directory: ${{ env._GO_DIR }}
        run: |
          git tag -d "${{ env.TAG_PHASE_2 }}" || echo "No tag to delete"
          git push --delete origin "${{ env.TAG_PHASE_2 }}" || echo "No tag to delete"

          git tag "${{ env.TAG_PHASE_2 }}"
          git push origin "${{ env.TAG_PHASE_2 }}"

      # THEN Assert that an RC tag was pushed on Release Branch
      - name: Assert that the RC tag '${{ env.EXPECTED_RC_TAG }}' was pushed on '${{ env.RELEASE_BR }}' Branch
        env:
          # if test code has auth issues pass in another token:
          # GITHUB_TOKEN: ${{ secrets.READ_PR_GITOPS_AUTOMATION }}
          # try the github provided token
          token: ${{ secrets.GITHUB_TOKEN }}
        run: |
          start_time=$(date +%s)

          # Get the commit SHA of the head of the ${{ env.RELEASE_BR }} branch
          branch_sha=$(curl -s -H "Authorization: token ${token}" \
            "https://api.github.com/repos/${{ env._GO_REPO }}/git/refs/heads/${{ env.RELEASE_BR }}" | jq -r '.object.sha')
          while true; do

            # Get the list of tags in the repository
            tag_sha=$(curl -s -H "Authorization: token ${token}" \
              "https://api.github.com/repos/${{ env._GO_REPO }}/git/refs/tags/${{ env.EXPECTED_RC_TAG }}" | jq -r '.object.sha')

            # Compare the commit SHA of the tag and the release branch
            if [ "$branch_sha" = "$tag_sha" ]; then
              echo "[INFO] Asserted RC Tag '${{ env.EXPECTED_RC_TAG }}' was pushed on the ${{ env.RELEASE_BR }} Branch"
              echo PR_RELEASE_TIMESTAMP=$(date +%s) >> $GITHUB_ENV
              break
            else
              current_time=$(date +%s)
              elapsed_time=$(($current_time - $start_time))

              if [ $elapsed_time -ge 30 ]; then
                echo "[Assertion Error] RC Tag was not pushed on the ${{ env.RELEASE_BR }} Branch"
                echo "Exiting with error..."
                exit 1
              fi
            fi

            # Sleep for 3.5 seconds
            sleep 3.5
          done

      # later we can assert whether the tag was a DEV Release or a PROD Release
      

      # THEN Assert that exatly one PR to main closed, with code merge, after PR_RELEASE_TIMESTAMP
      - name: Assert that the PR to main closed with code merge
        env:
          GO_INCOMING_BRANCH: ${{ env._USER_BR }}
          MAIN_BR: 'main'
          # if test code has auth issues pass in another token:
          # GITHUB_TOKEN: ${{ secrets.READ_PR_GITOPS_AUTOMATION }}
          # try the github provided token
          token: ${{ secrets.GITHUB_TOKEN }}
        run: |
          repo="${_GO_REPO}"
          branch="main"

          # Get the commit SHA of the head of the ${{ env.MAIN_BR }} branch
          branch_sha=$(curl -s -H "Authorization: token ${token}" \
            "https://api.github.com/repos/${_GO_OWNER}/${_GO_REPO_NAME}/git/refs/heads/${{ env.MAIN_BR }}" | jq -r '.object.sha')

          # Get the commit SHA of Release Branch
          release_sha=$(curl -s -H "Authorization: token ${token}" \
            "https://api.github.com/repos/${_GO_OWNER}/${_GO_REPO_NAME}/git/refs/heads/${{ env.RELEASE_BR }}" | jq -r '.object.sha')

          echo "[INFO] Commit Sha of Main Br: $branch_sha"

          sleep 15
          start_time=$(date +%s)

          while true; do

            # Get the list of PRs in the repository
            # invariant of ?head=boromir:release, since we accept only later than PR_RELEASE_TIMESTAMP
            # take care that merged_at returns dates as 2024-07-31T13:03:13Z
            # which needs to be comparable to our PR_RELEASE_TIMESTAMP which is in seconds

            # Get the list of open PRs to ${{ env.MAIN_BR }}
            # prs=$(curl -s -H "Authorization: token ${token}" "https://api.github.com/repos/${_GO_OWNER}/${_GO_REPO_NAME}/pulls?state=closed?base=${{ env.MAIN_BR }}" | jq -r '.[] | select(.merged_at != null)')

            # prs=$(curl -s -H "Authorization: token ${token}" "https://api.github.com/repos/boromir674/gitops-automation/pulls?state=closed?base=main" | jq -r '.[] | select(.merged_at != null) | .merged, .merged_at, .head.sha')

            # PRs that are closed with Merge: JSON array (of objects)
            prs=$(curl -s -H "Authorization: token ${token}" "https://api.github.com/repos/boromir674/gitops-automation/pulls?state=closed?base=main" | jq -r '[.[] | {merged_at: .merged_at, head_sha: .head.sha} | map(select(.merged_at != null))]')

            # echo "[DEBUG] PRs: $prs"

            for pr in $(echo ${prs} | jq -r '.[] | @base64'); do
              _jq() {
                echo ${i} | base64 --decode | jq -r ${1}
              }
              merged_at=$(echo $(_jq '.merged_at'))
              head_sha=$(echo $(_jq '.head_sha'))

              echo "[DEBUG] Considering PR:"
              echo ${pr} | jq -r '.'

              # extract merged_at date and convert to seconds, if not null

              date="${merged_at}"

              seconds=$(date -d "$date" +%s)
              echo "[DEBUG] Computed seconds: $seconds"

              # consider only if newer than PR_RELEASE_TIMESTAMP seconds
              if [ $seconds -ge $PR_RELEASE_TIMESTAMP ]; then
                # extract the commit SHA of the PR

                pr_sha=$head_sha
                echo "[DEBUG] Computed SHA: $pr_sha"

                # consider only Release --> Main PRs
                # closed with code merge is already guaranteed here
                if [ "$pr_sha" == "$release_sha" ]; then
                  echo "[INFO] Asserted a PR to main closed, with code merge to Main"
                  break
                fi
              fi
            done

            # Update the current Elapsed time
            current_time=$(date +%s)
            elapsed_time=$(($current_time - $start_time))

            # Exit with Error if max Elapsed time is reached
            if [ $elapsed_time -ge 30 ]; then
              echo "[Assertion Error] PR to main did not close with code merge"
              echo "Exiting with error..."
              exit 1
            fi

            # Sleep for 8 seconds
            sleep 8

          done

      # later we can assert that Main Br got PROD tag (v1.0.0, v1.2.0-dev, etc)
      # and that Github Release was also made from that tag
